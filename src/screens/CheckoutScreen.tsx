import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  StyleSheet,
  FlatList,
  SafeAreaView,
  ActivityIndicator,
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { db } from "../services/firebaseConfig";
import {
  collection,
  getDocs,
  getDoc,
  doc,
  setDoc,
  addDoc,
  updateDoc,
  deleteDoc,
  serverTimestamp,
} from "firebase/firestore";

import { useRoute, useNavigation } from "@react-navigation/native";
import Ionicons from "@expo/vector-icons/Ionicons";

export default function CheckoutScreen() {
  const route = useRoute();
  const navigation = useNavigation<any>();
  const directProduct = route.params?.productDirect;

  const [user, setUser] = useState<any>(null);
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("");
  const [cartItems, setCartItems] = useState<any[]>([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);

  // üß† L·∫•y th√¥ng tin user + gi·ªè h√†ng ho·∫∑c s·∫£n ph·∫©m tr·ª±c ti·∫øp
  useEffect(() => {
    const fetchData = async () => {
      try {
        const userJson = await AsyncStorage.getItem("user");
        const userData = userJson ? JSON.parse(userJson) : null;

        if (!userData?.uid) {
          navigation.navigate("Login", { redirectTo: "Checkout" });
          return;
        }
        setUser(userData);

        console.log("üë§ UID ng∆∞·ªùi d√πng:", userData.uid);

        // ‚úÖ N·∫øu ƒë·∫∑t h√†ng tr·ª±c ti·∫øp t·ª´ ProductDetail
        if (directProduct) {
          setCartItems([directProduct]);
          setTotal(parseInt(directProduct.price) * directProduct.quantity);
        } else {
          // ‚úÖ L·∫•y gi·ªè h√†ng t·ª´ Firestore
          const itemsRef = collection(db, "carts", userData.uid, "items");
          const itemsSnap = await getDocs(itemsRef);
          const items = itemsSnap.docs.map((d) => ({ id: d.id, ...d.data() }));
          setCartItems(items);

          const totalPrice = items.reduce(
            (sum, i) => sum + parseInt(i.price) * i.quantity,
            0
          );
          setTotal(totalPrice);
        }

        // ‚úÖ L·∫•y th√¥ng tin t·ª´ collection "addresses"
        const addressRef = doc(db, "addresses", userData.uid);
        const addressSnap = await getDoc(addressRef);

        if (addressSnap.exists()) {
          const data = addressSnap.data();
          console.log("üè† D·ªØ li·ªáu t·ª´ addresses:", data);

          setName(data.name || "");
          setAddress(data.address || "");
          setPhone(data.phone || "");
        } else {
          console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ cho ng∆∞·ªùi d√πng n√†y!");
        }
      } catch (err) {
        console.error("üî• L·ªói khi t·∫£i d·ªØ li·ªáu Checkout:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [directProduct]);

  // üßæ X·ª≠ l√Ω x√°c nh·∫≠n ƒë·∫∑t h√†ng
  const handleConfirm = async () => {
    if (!name.trim() || !address.trim() || !phone.trim()) {
      Alert.alert(
        "‚ö†Ô∏è",
        "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n, ƒë·ªãa ch·ªâ v√† s·ªë ƒëi·ªán tho·∫°i!"
      );
      return;
    }

    if (!/^\d{10,11}$/.test(phone.trim())) {
      Alert.alert("‚ö†Ô∏è", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (10-11 ch·ªØ s·ªë)!");
      return;
    }

    try {
      // ‚úÖ L∆∞u th√¥ng tin giao h√†ng v√†o addresses
      const addressRef = doc(db, "addresses", user.uid);
      await setDoc(
        addressRef,
        { name, address, phone, updatedAt: new Date().toISOString() },
        { merge: true }
      );

      // ‚úÖ Th√™m ƒë∆°n h√†ng m·ªõi v√†o orders
      await addDoc(collection(db, "orders"), {
        userId: user.uid,
        name,
        address,
        phone,
        items: cartItems,
        total,
        createdAt: serverTimestamp(),
      });

      // ‚úÖ C·∫≠p nh·∫≠t t·ªìn kho t·ª´ng s·∫£n ph·∫©m
      for (const item of cartItems) {
        const productRef = doc(db, "products", item.id);
        const productSnap = await getDoc(productRef);

        if (productSnap.exists()) {
          const productData = productSnap.data();
          const currentStock = productData.stock ?? 0;
          const newStock = Math.max(0, currentStock - item.quantity);

          await updateDoc(productRef, { stock: newStock });
          console.log(`üìâ C·∫≠p nh·∫≠t t·ªìn kho: ${item.name} ‚Üí ${newStock}`);
        } else {
          console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong kho: ${item.name}`);
        }
      }

      // ‚úÖ N·∫øu ƒë·∫∑t h√†ng t·ª´ gi·ªè ‚Üí x√≥a gi·ªè h√†ng
      if (!directProduct) {
        const itemsRef = collection(db, "carts", user.uid, "items");
        const itemsSnap = await getDocs(itemsRef);
        for (const item of itemsSnap.docs) {
          await deleteDoc(doc(db, "carts", user.uid, "items", item.id));
        }
      }

      Alert.alert("üéâ Th√†nh c√¥ng", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t!");
      navigation.navigate("MainTabs", { screen: "Home" });
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë·∫∑t h√†ng:", error);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.safeArea}>
        <View style={styles.center}>
          <ActivityIndicator size="large" color="#E58E26" />
          <Text>ƒêang t·∫£i d·ªØ li·ªáu...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <TouchableOpacity
        style={styles.backButton}
        onPress={() => navigation.goBack()}
        activeOpacity={0.8}
      >
        <Ionicons name="chevron-back" size={24} color="#333" />
        <Text style={styles.backText}>Quay l·∫°i</Text>
      </TouchableOpacity>
      <FlatList
        ListHeaderComponent={
          <>
            <Text style={styles.title}>X√°c nh·∫≠n ƒë∆°n h√†ng</Text>

            {/* üßç Th√¥ng tin c√° nh√¢n */}
            <View style={styles.inputGroup}>
              <Text style={styles.label}>H·ªç v√† t√™n</Text>
              <TextInput
                style={styles.input}
                value={name}
                onChangeText={setName}
                placeholder="Nh·∫≠p h·ªç t√™n..."
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>S·ªë ƒëi·ªán tho·∫°i</Text>
              <TextInput
                style={styles.input}
                value={phone}
                onChangeText={setPhone}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i..."
                keyboardType="phone-pad"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>ƒê·ªãa ch·ªâ giao h√†ng</Text>
              <TextInput
                style={[styles.input, { height: 80 }]}
                value={address}
                onChangeText={setAddress}
                multiline
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠n h√†ng..."
              />
            </View>

            <Text style={styles.sectionTitle}>üõí S·∫£n ph·∫©m</Text>
          </>
        }
        data={cartItems}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.item}>
            <Text style={styles.name}>{item.name}</Text>
            <Text>
              {item.quantity} √ó {parseInt(item.price).toLocaleString()}ƒë
            </Text>
          </View>
        )}
        ListFooterComponent={
          <>
            <Text style={styles.totalText}>
              T·ªïng c·ªông: {total.toLocaleString()}ƒë
            </Text>
            <TouchableOpacity style={styles.confirmBtn} onPress={handleConfirm}>
              <Text style={styles.confirmText}>‚úÖ X√°c nh·∫≠n ƒë·∫∑t h√†ng</Text>
            </TouchableOpacity>
          </>
        }
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: { flex: 1, backgroundColor: "#fff", padding: 16 },
  center: { flex: 1, alignItems: "center", justifyContent: "center" },
  title: {
    fontSize: 22,
    fontWeight: "700",
    color: "#E58E26",
    marginBottom: 10,
  },
  inputGroup: { marginBottom: 15 },
  label: { fontSize: 15, marginBottom: 5, fontWeight: "600", color: "#333" },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 10,
    padding: 10,
    fontSize: 15,
    backgroundColor: "#fff",
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "700",
    marginVertical: 10,
    color: "#924900",
  },
  item: {
    backgroundColor: "#f9f9f9",
    padding: 10,
    borderRadius: 8,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: "#eee",
  },
  name: { fontWeight: "bold", fontSize: 15 },
  totalText: {
    fontSize: 18,
    fontWeight: "bold",
    textAlign: "right",
    marginTop: 20,
    color: "#924900",
  },
  confirmBtn: {
    backgroundColor: "#E58E26",
    marginTop: 16,
    paddingVertical: 14,
    borderRadius: 10,
    alignItems: "center",
  },
  confirmText: { color: "#fff", fontSize: 16, fontWeight: "700" },
  backButton: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 12,
    marginTop: 5,
  },
  backText: {
    fontSize: 16,
    fontWeight: "500",
    color: "#333",
    marginLeft: 5,
  },
});
