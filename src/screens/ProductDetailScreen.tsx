import React, { useState } from "react";
import {
  View,
  Text,
  Image,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  TextInput, // ‚úÖ th√™m import TextInput
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Ionicons } from "@expo/vector-icons"; // ‚úÖ s·ª≠a import Ionicons
import AsyncStorage from "@react-native-async-storage/async-storage";
import { doc, getDoc, setDoc, updateDoc, increment } from "firebase/firestore";
import { db } from "../services/firebaseConfig";

export default function ProductDetailScreen({ route, navigation }: any) {
  const { product } = route.params;
  const [quantity, setQuantity] = useState(1);

  /* ------------------- Th√™m v√†o gi·ªè h√†ng ------------------- */
  const addToCart = async () => {
    try {
      const userJson = await AsyncStorage.getItem("user");
      const user = userJson ? JSON.parse(userJson) : null;

      if (!user?.uid) {
        Alert.alert("‚ö†Ô∏è", "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
        return;
      }

      if (product.stock === 0) {
        Alert.alert("‚ö†Ô∏è", "S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng!");
        return;
      }

      const cartItemRef = doc(db, "carts", user.uid, "items", product.id);
      const cartItemSnap = await getDoc(cartItemRef);

      if (cartItemSnap.exists()) {
        await updateDoc(cartItemRef, { quantity: increment(quantity) });
      } else {
        await setDoc(cartItemRef, {
          id: product.id,
          name: product.name,
          price: product.price,
          imageUrl: product.imageUrl || "",
          quantity: quantity,
          createdAt: new Date().toISOString(),
        });
      }

      Alert.alert("üõí", `ƒê√£ th√™m ${quantity} s·∫£n ph·∫©m v√†o gi·ªè h√†ng!`);
      setQuantity(1);
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
    }
  };

  /* ------------------- TƒÉng / gi·∫£m s·ªë l∆∞·ª£ng ------------------- */
  const increase = () => {
    const maxStock = product.stock ?? 9999;
    if (quantity < maxStock) setQuantity(quantity + 1);
  };

  const decrease = () => {
    if (quantity > 1) setQuantity(quantity - 1);
  };

  /* ------------------- Render giao di·ªán ------------------- */
  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView
        style={styles.container}
        contentContainerStyle={{ paddingBottom: 100 }}
      >
        {/* üîô N√∫t quay l·∫°i */}
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.goBack()}
          activeOpacity={0.8}
        >
          <Ionicons name="chevron-back" size={24} color="#333" />
          <Text style={styles.backText}>Quay l·∫°i</Text>
        </TouchableOpacity>

        {!!product.imageUrl && (
          <Image
            source={{ uri: product.imageUrl }}
            style={styles.image}
            resizeMode="cover"
          />
        )}

        <View style={styles.body}>
          <Text style={styles.name}>{product.name}</Text>
          <Text style={styles.price}>
            {Number(product.price).toLocaleString()} VND
          </Text>

          {/* üß± B·ªô ch·ªçn s·ªë l∆∞·ª£ng */}
          <View style={styles.qtyContainer}>
            <Text style={styles.qtyLabel}>S·ªë l∆∞·ª£ng</Text>

            <View style={styles.qtyBox}>
              {/* Gi·∫£m s·ªë l∆∞·ª£ng */}
              <TouchableOpacity
                style={styles.qtyBtn}
                onPress={decrease}
                disabled={quantity <= 1 || product.stock === 0}
              >
                <Text
                  style={[
                    styles.qtySymbol,
                    (quantity <= 1 || product.stock === 0) && { color: "#bbb" },
                  ]}
                >
                  ‚àí
                </Text>
              </TouchableOpacity>

              {/* ‚úÖ √î nh·∫≠p s·ªë l∆∞·ª£ng */}
              <TextInput
                style={styles.qtyInput}
                keyboardType="numeric"
                editable={product.stock > 0} // ‚ùå Kh√¥ng cho nh·∫≠p n·∫øu h·∫øt h√†ng
                value={String(quantity)}
                onChangeText={(text) => {
                  const num = parseInt(text.replace(/[^0-9]/g, ""), 10);
                  if (isNaN(num)) {
                    setQuantity(1);
                    return;
                  }

                  const maxStock = product.stock ?? 9999;
                  if (num > maxStock) setQuantity(maxStock);
                  else if (num < 1) setQuantity(1);
                  else setQuantity(num);
                }}
              />

              {/* TƒÉng s·ªë l∆∞·ª£ng */}
              <TouchableOpacity
                style={styles.qtyBtn}
                onPress={increase}
                disabled={
                  product.stock === 0 || quantity >= (product.stock ?? 9999)
                }
              >
                <Text
                  style={[
                    styles.qtySymbol,
                    (product.stock === 0 ||
                      quantity >= (product.stock ?? 9999)) && { color: "#bbb" },
                  ]}
                >
                  +
                </Text>
              </TouchableOpacity>
            </View>

            {/* ‚ö†Ô∏è N·∫øu h·∫øt h√†ng */}
            {product.stock === 0 && (
              <Text style={{ color: "red", marginTop: 4, fontSize: 13 }}>
                S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng
              </Text>
            )}
          </View>

          {/* M√¥ t·∫£ & t·ªìn kho */}
          <Text style={styles.section}>M√¥ t·∫£</Text>
          <Text style={styles.desc}>
            {product.description || "Kh√¥ng c√≥ m√¥ t·∫£."}
          </Text>

          <Text style={styles.section}>T·ªìn kho</Text>
          <Text>{product.stock ?? 0} s·∫£n ph·∫©m</Text>
        </View>
      </ScrollView>

      {/* üõí Thanh h√†nh ƒë·ªông */}
      <View style={styles.bottomBar}>
        <View style={styles.buttonRow}>
          <TouchableOpacity
            style={[
              styles.btnAddCart,
              product.stock === 0 && { backgroundColor: "#ccc" },
            ]}
            onPress={addToCart}
            activeOpacity={0.9}
            disabled={product.stock === 0}
          >
            <Text style={styles.btnText}>
              üõí {product.stock === 0 ? "H·∫øt h√†ng" : `Th√™m ${quantity}`}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[
              styles.btnCheckout,
              product.stock === 0 && { backgroundColor: "#ccc" },
            ]}
            onPress={() =>
              navigation.navigate("Checkout", {
                productDirect: { ...product, quantity },
              })
            }
            activeOpacity={0.9}
            disabled={product.stock === 0}
          >
            <Text style={styles.btnText}>
              üí≥ {product.stock === 0 ? "Kh√¥ng th·ªÉ ƒë·∫∑t" : "ƒê·∫∑t ngay"}
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
}

/* ================== STYLES ================== */
const styles = StyleSheet.create({
  safeArea: { flex: 1, backgroundColor: "#fff" },
  container: { flex: 1, backgroundColor: "#fff" },

  backButton: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 12,
    marginTop: 5,
  },
  backText: {
    fontSize: 16,
    fontWeight: "500",
    color: "#333",
    marginLeft: 5,
  },

  image: { width: "100%", height: 260, borderRadius: 10 },
  body: { padding: 16 },
  name: { fontSize: 22, fontWeight: "700", color: "#333" },
  price: { marginTop: 6, fontSize: 18, color: "#E58E26", fontWeight: "700" },

  qtyContainer: {
    marginTop: 15,
    flexDirection: "column",
    alignItems: "flex-start",
  },
  qtyLabel: { fontSize: 16, fontWeight: "600", color: "#333", marginBottom: 6 },
  qtyBox: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#f7f7f7",
    borderRadius: 10,
    paddingHorizontal: 8,
  },
  qtyBtn: { paddingHorizontal: 12, paddingVertical: 6 },
  qtySymbol: { fontSize: 20, fontWeight: "700", color: "#E58E26" },
  qtyInput: {
    width: 45,
    height: 36,
    textAlign: "center",
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    fontSize: 16,
    color: "#333",
    marginHorizontal: 6,
    paddingVertical: 4,
  },

  section: { marginTop: 16, fontSize: 16, fontWeight: "700" },
  desc: { marginTop: 6, color: "#555", lineHeight: 20 },

  bottomBar: {
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: "#fff",
    borderTopWidth: 1,
    borderTopColor: "#eee",
    paddingVertical: 12,
    paddingHorizontal: 16,
  },
  buttonRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    gap: 12,
  },
  btnAddCart: {
    flex: 1,
    backgroundColor: "#E58E26",
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: "center",
    justifyContent: "center",
    height: 55,
    marginRight: 6,
    elevation: 2,
  },
  btnCheckout: {
    flex: 1,
    backgroundColor: "#924900",
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: "center",
    justifyContent: "center",
    height: 55,
    marginLeft: 6,
    elevation: 2,
  },
  btnText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "700",
    letterSpacing: 0.5,
  },
});
